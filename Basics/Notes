BASIC SYNTAX:

- using system means that we can use ckasses frin the system namespace
- namespace is used to organize your code, and it is a container for classes and other namespace
- curly brackets {} marks the beginning and end of a block of code
- class is a container for data and methods, which brings functionality to your program.
    - Every line of code that runs in C# must be inside a class
        -EX: class named Program
- main method always appears in a C# program. Any code inside its curly brackets will be executed
- Console is a class of the System namespace, which has a WriteLine() method that is used to ouput/print text

NOTE: Every C# statment ends in a semicolon
NOTE: C# is case sensitive

*** SUPER NOTE ***
CAN"T HAVE TWO MAINS IN THE SAME FOLDER

COMMENTS:

- // <- single line comment
- /**/ <- multi line comment 
- ctrl / <- keyboard shortcut in vs code to comment all lines out

VARIABLES:

- Types
    - int: stores integers
    - double: stores floating point numbers
    - char: stores single charactes
    - string: stores text
    - bool: stores true or false

- if you don't want others to overwrite use const
- can combine both text and variable or variable and variable using + regradless of typing
- more than one varibale can be created and assigned at the same time
    - int x = 5, y = 6, z = 50;
    - int a, b, c;

NOTE: All varaibles must be identified with unique names

DATA TYPES:

- int = 4 bytes
- long = 8 bytes
- float = 4 bytes
- double = 8 bytes
- bool = 1 bytes
- char = 2 bytes
- string = 2 bytes per char

- integer types stores whole numbers, postive or negative without decimals i.e. int and long
- Floating point types represents number with a fractional part containing one or more decimals i.e. float or double
    - a floating point number can also be a scientific number with an "e" to indicate the power of 10

TYPE CASTING:

- Type casting is when you assign a value of one data type to another type
    - implicit casting(automatically): converting a smaller type to a large type size
        - char -> int -> long -> float -> double
    - explict casting(manually): converting larger type into a smaller size type
        - double -> float -> long -> int -> char

USER INPUT:

- use Console.ReadLine() to get user input

NOTE: Console.ReadLine() method returns a string soo you have to type cast the input whenever reading it in
    -EX: Convert.ToInt32(Console.ReadLine());

OPERATORS:

- Arithmetic:
    - + => addition
    - - => subtraction
    - * => multiplication
    - / => division
    - % => Modulus
    - ++ => Increment
    - -- => Decrement

- Assignment:
    - = => x = 5;
    - += => x +=3 => x = x + 3;
    - -= => x -=3 => x = x - 3;
    - *= => x *=3 => x = x * 3;
    - /= => x /=3 => x = x / 3;
    - %= => x %=3 => x = x % 3;
    - &= => x &=3 => x = x & 3;
    - |= => x |=3 => x = x | 3;
    NOTE: this is a bitewise assignment operation
    - ^= => x ^=3 => x = x ^ 3;
    - >>= => x >>=3 => x = x >> 3;
    NOTE: this is a bitewise opperation that moves x right 3 bites
    - <<= => x <<=3 => x = x << 3;
    NOTE: this is a bitewise opperation that moves x left 3 bites
        - EX: int x = 5; //binary: 0000 0101
              x <<=3; //shift three positions to the left 
              - so 5 is  0000 0101
              - and x becomes 40 or 0010 1000

- comparison:
    - == => equal to
    - != => not equal to
    - > => greater than
    - < => less than
    - >= => Greater than or equal to
    - <= => less than or equal to

- logical:
    - && => logical and
    - || => logical or
    - ! => logical not

MATH:

- Math.Max() = find the higher value
- Math.Min() = find the lower value
- Math.Sqrt() = method returns the square root 
- Math.Abs() = method returns the absolute value
- Math.Round() = rounds a number to the nearest whole value

STRINGS:

- a string is a collections of characters surrounded by double quotes
- in C# a string is an object which contains properties and methods that can perform certain operations on strings

- some string methods:
    - Length
    - ToUpper
    - ToLower

- Concatenation:
    - The + opperator can be used to combine two strings
    - string.Concat() can be used to concatenate two strings

- Interpolation:
    - string interpolation, which substitutes values of variables into placeholders in a string uses a dollar sign at the begining of the string ($)

- Access
    - you can access the characters in a string by referring to its index number inside square brackets 
    - first character 0
    - you can undex position of a specific character in a string by using IndexOf()
    - substring extracts the charcters from a string starting at specific position

- Special Chars
    - \' => single qoute
    - \" => douvle qoute
    - \\ => backslash
    - \n => new line
    - \t => tab
    - \b => Backspace

BOOLEANS:

- bool data type can take the values true or false
- a boolean expresion returns a boolean value: True or False by comparing values/variables

CONDITIONAL STATEMENTS:

- use if to specify a block of code to be exuceted if a specific condition is truee
- use else to specify a block of code to be executed, if the same condition is false
- use else if to specify a new condition to test if the first condition is false
- use switch to specify many alternatice blocks of code to be executed

NOTE: if statements can be shortened using this format:
    - string var = (condition) ? "if condition is true" : "if condition is false";

SWITCH:
- use the switch statement to select one of many code blocks to be executed

- how it works:
    - the swithc expression is evaluated once
    - the value of the expression is compared with the values of each case
    - if there is a match, the associated block of code is executed
    - the break and default keywords will be described later in this chapter


- when C# reaches the break keyword it breaks out of the switch statement
- the default keyword is optional and specifies some code to run if there is no case match

WHILE LOOP:

- loops can execute a block of code as long as a specified condition is reached
- while loop loops through a block of code as long as a specified condition is true
- a do while loop is a variant of the while loop this executs the code once before checking if the condition is true

