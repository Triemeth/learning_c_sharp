OOP:

- oop is object oriented programming
- oop is faster and easier to execute then procedural programming it also provides a clear structure

CLASSES/OBJECTS:

- class is a template for objects and an object is an instance of a class
    - EX: class=car objects=audi, toyota, volvo

- Multiple Objects:
    - you can create multiple objectts of one class
    - you can create an object of a class and access it in another class 
        - this is often better for organization

CLASS MEMBERS:

- fields and methods inside classes are often referred to as "class members"
- you can leave fields blank and modify them when creating an obejct

CONSTRUCTORS:

- a constructor is a special method that is used to initialize objects The advantage of a constructor, is that it is called when an object of 

ACCESS MODIFIERS:

- access modifiers set the access level/visability for classes, feilds, methods, and properties

- public = code is accessible for all classes
- private = code is only accesible within the same class
- protected = code is accessible within the same class, or in a class that is inheritied from that class
- internal = only accesible within its own assembly

PROPERTIES:

- encapsaltion is to make sure that "senstive" data is hidden from users
    - declare fields/variables as private
    - provide public get and set methods through properties, to access and update the value of a private field

- why encapsulation:
    - better control of class memebers
    - fields can be made read-only or write-only
    - flexible the programmer can change one part of the code without affecting differnt parts
    - increased data security

INHERTIANCE:

- Derived Class(Child) = the class that inherits from another class
- Base Class(Parent) = the class being inherited from
- if you dont want classes to inherit from another class you can make the base class a sealed class

POLYMOEPHISM:

- polymorphism uses those methods to perform differnt tasks
- C# offers an option to override the base class method, by adding the virtual keyword to the method inside the base class and by using the override keyword for each derived class methods

ABSTRACTION:

- data abstraction is the process of hiding certain details and showing only essential information to the user
- abstraction can be achieved with either abstract classes or interfaces

- the abstract keyword is used for classes and methods:
    - abstract class: is a restricted class that cannot be used to create objects
    - abstract method: can only be used in an abstract c;ass and it does not have a body. the bodu is provided by the derived class

INTERFACE:

- an interface is a completely "abstract class", which can only contain abstract methods and properties
- interfaces cannot be used to create objects 
- interface methods do not have a body
- on implementation of an interface, you must override all of its methods

- you can add multiple interfaces to a class

ENUMS:

- an enum is a special "class" that represents a group of constants that are unchangeable/read-only variables
- by default, the furst item of an enum has the value zero
- to get the int calue from an item you must explictly convert the item

FILES:

- the file class from the System.IO namespace allows us to work with files
- appendText() => Appends text at the end of an existing file
- Copy() => copies a file
- Create() => creates or overwrites a file
- Delete() => deletes a file
- Exist() => test wheter the file exists
- ReadAllText() => reads the contents of a file
- Replace() => replaces the contents of a fule with the contents of another file
- WriteAllText() => creates a new file and writes the contents to it. if the file already exists it will be overwritten